name: Docker

on:
  push:
    branches:
      - main

  # Run tests for any PRs.
  pull_request:
    branches:
      - main
      - SM-*

env:
  IMAGE_NAME: podcast-site
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test build
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: test
    name: Build and Publish

    env:
      HUGO_ENV: "development"

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg HUGO_ENV=$HUGO_ENV

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCTL_TOKEN }}

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [[ "$VERSION" == "main" ]] && VERSION="latest"

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          # GitHub
          docker push $IMAGE_ID:$VERSION
          # Cloud
          doctl registry login
          docker tag $IMAGE_ID:$VERSION ${{ secrets.PRODUCTION_REGISTRY }}/village-$IMAGE_NAME:development-$VERSION
          docker push ${{ secrets.PRODUCTION_REGISTRY }}/village-$IMAGE_NAME:development-$VERSION

  deploy:
    runs-on: ubuntu-latest
    needs: push
    name: Deploy to Development
    steps:
      - name: Start GitHub deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: development
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCTL_TOKEN }}
      - name: Kubectl install
        uses: Azure/setup-kubectl@v1
      - name: Deploy to development
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          cat << EOF > deploy.yaml
          apiVersion: extensions/v1beta1
          kind: Ingress
          metadata:
            name: village-podcast-development-ingress
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
          spec:
            rules:
            - host: dev.ittakesavillage.art
              http:
                paths:
                - backend:
                    serviceName: village-podcast-development
                    servicePort: 80
            tls:
            - secretName: village-podcast-development-cert
              hosts:
                - dev.ittakesavillage.art
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: village-podcast-development
          spec:
            ports:
            - port: 80
              targetPort: 80
            selector:
              app: village-podcast-development
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: village-podcast-development
          spec:
            selector:
              matchLabels:
                app: village-podcast-development
            replicas: 1
            template:
              metadata:
                labels:
                  app: village-podcast-development
              spec:
                containers:
                - name: village-podcast-development
                  image: ${{ secrets.PRODUCTION_REGISTRY }}/village-$IMAGE_NAME:development-$VERSION
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 80
          EOF
          doctl kubernetes cluster kubeconfig save ${{ secrets.DEPLOYMENT_CLUSTER }}
          kubectl apply --validate=true --filename=deploy.yaml
          kubectl rollout restart deployment.apps/village-podcast-development

      - name: Update GitHub deployment
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env_url: https://dev.ittakesavillage.art/
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - uses: "marvinpinto/action-automatic-releases@v1.1.0"
        if: success()
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"

